/* Generated By:JJTree&JavaCC: Do not edit this line. SimpLConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SimpLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LPAREN = 12;
  /** RegularExpression Id. */
  int RPAREN = 13;
  /** RegularExpression Id. */
  int LBRACE = 14;
  /** RegularExpression Id. */
  int RBRACE = 15;
  /** RegularExpression Id. */
  int COMMA = 16;
  /** RegularExpression Id. */
  int SEMICOLON = 17;
  /** RegularExpression Id. */
  int COLON = 18;
  /** RegularExpression Id. */
  int DOT = 19;
  /** RegularExpression Id. */
  int ASSIGN = 20;
  /** RegularExpression Id. */
  int QUESTION = 21;
  /** RegularExpression Id. */
  int EXCLAMATION = 22;
  /** RegularExpression Id. */
  int ADD = 23;
  /** RegularExpression Id. */
  int SUB = 24;
  /** RegularExpression Id. */
  int MULT = 25;
  /** RegularExpression Id. */
  int DIV = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int NOTEQ = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int GT = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int GE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int BOOL = 35;
  /** RegularExpression Id. */
  int CONST = 36;
  /** RegularExpression Id. */
  int DO = 37;
  /** RegularExpression Id. */
  int ELSE = 38;
  /** RegularExpression Id. */
  int FALSE = 39;
  /** RegularExpression Id. */
  int IF = 40;
  /** RegularExpression Id. */
  int INT = 41;
  /** RegularExpression Id. */
  int MAIN = 42;
  /** RegularExpression Id. */
  int NOT = 43;
  /** RegularExpression Id. */
  int OR = 44;
  /** RegularExpression Id. */
  int REAL = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int STRING = 47;
  /** RegularExpression Id. */
  int THEN = 48;
  /** RegularExpression Id. */
  int TRUE = 49;
  /** RegularExpression Id. */
  int VAR = 50;
  /** RegularExpression Id. */
  int VOID = 51;
  /** RegularExpression Id. */
  int WHILE = 52;
  /** RegularExpression Id. */
  int NUMBER = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int STRINGS = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int DIGITS = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int LETTERS = 59;
  /** RegularExpression Id. */
  int UNDERSCORE = 60;
  /** RegularExpression Id. */
  int OTHER = 61;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTILINE_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\b\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\":=\"",
    "\"?\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"and\"",
    "\"boolean\"",
    "\"const\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"if\"",
    "\"int\"",
    "\"main\"",
    "\"not\"",
    "\"or\"",
    "\"real\"",
    "\"return\"",
    "\"string\"",
    "\"then\"",
    "\"true\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "<NUMBER>",
    "<IDENTIFIER>",
    "<STRINGS>",
    "<DIGIT>",
    "<DIGITS>",
    "<LETTER>",
    "<LETTERS>",
    "\"_\"",
    "<OTHER>",
  };

}
